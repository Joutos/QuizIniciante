1;Qual é a importância da modelagem de software durante o processo de desenvolvimento de um sistema?;B;A - Somente melhorar a colaboração e entendimento.\n A modelagem de software permite que a equipe de desenvolvimento trabalhe em conjunto para compreender os requisitos do sistema, discutir soluções e tomar decisões informadas. ;B - A modelagem de software apresenta uma compreensão comum, comunicação efetiva, detecção de problemas antecipada, qualidade do software aprimorada e facilitação da manutenção e evolução do sistema. É uma prática indispensável para o desenvolvimento de software bem-sucedido.;C - Principal objetivo é detectar problemas de forma antecipada. Através da modelagem de software, é possível identificar potenciais problemas e falhas de design antes de iniciar a implementação.;D - Somente documetar e realizar a manutenção do sistema. A modelagem de software fornece uma documentação visual do sistema, tornando mais fácil para os desenvolvedores compreenderem a estrutura, a lógica e as interações do software.
2;Quais são os principais diagramas utilizados na modelagem de software e como eles ajudam no entendimento e na comunicação entre os membros da equipe de desenvolvimento?;D;A - Não são usados diagramas na modelagem de software.;B - Existem apenas dois diagramas usados na modelagem de software.;C - Existem vários tipos de diagramas, os mais utilizados são: Diagrama de pessoa, diagrama de caso de uso e diagrama de software.;D - Existem vários tipos de diagramas, os mais utilizados são: Diagrama de Caso de Uso, Diagrama de Classes e Diagrama de sequência.
3;Qual é a diferença entre uma variável local e uma variável global em programação?;A;A - Uma variável local é visível apenas dentro do bloco em que foi declarada, enquanto uma variável global é visível em todo o programa.;B - Não existe diferença entre variável local e variável global.;C - uma variável global é visível apenas dentro do bloco em que foi declarada, enquanto uma variável local é visível em todo o programa.;D - Elas tem a mesma função em programação.
4;Quais são os tipos de dados mais comuns em programação e qual a importância de entender suas diferenças e usos?;C;A -  Existe somente um dado usado em programação e é Números Inteiros (int), que representam os números inteiros.;B - Existem diversos tipos de dados usados em programação e os mais comuns são formas, classes e números.;C - Existem diversos tipos de dados usados em programação e os mais comuns são: int, float, Strings, Bool e List.;D - Existe somente um dado usado em programação e é Números de ponto flutuante (float), usado para representar números com parte decimal.
5;Como os laços de repetição (loops) podem ser utilizados na programação básica?;A;A - Permitindo a execução repetitiva de blocos de código, automatização de tarefas, manipulação de coleções de dados e controle de saída baseado em condições. ;B - Os laços de repetição não podem ser utilizados na programação básica. ;C - Não permitindo a execução repetitiva de blocos de código, automatização de tarefas, manipulação de coleções de dados e controle de saída baseado em condições. ;D - Permitindo a criação de novas classes.
6;Qual é o conceito de encapsulamento na programação orientada a objetos ? ;D;A - O conceito é não proteger os dados, escondendo os detalhes de implementação facilitando a evolução do código. ;B - Encapsulamento não é um conceito fundamental na programação orientada a objetos (POO). E o conceito vem de não proteger os dados, escondendo os detalhes de implementação. ;C - O conceito não é agrupar dados e métodos relacionados em uma única unidade, a classe. Nem proteger os dados escondendo os detalhes de implementação, facilitando a evolução do código. ;D - O conceito é agrupar dados e métodos relacionados em uma única unidade, a classe. Assim realizando a proteção dos dados, escondendo detalhes de implementação e facilitando a evolução do código.
7;Como a modelagem de software contribui para a identificação e solução de problemas durante o processo de desenvolvimento de um sistema?;B;A - A modelagem de software não contribui para a identificação e solução dos problemas durante o processo de desenvolvimento do sistema. ;B -  Contribui através da compreensão dos requisitos, Identificação de lacunas e inconsistências, Visualização da estrutura e arquitetura, Detecção de problemas de design e Análise de desempenho e otimização. ;C - Contribui apenas na detecção de problemas de design. ;D - Contribui apenas na identificação de lacunas e inconsistências.
8;Qual o tipo de diagrama que pode representar melhor os requisitos de um sistema? ;B;A - Diagrama de classes;B - Diagrama de casos de uso ;C - Diagrama de entidades e relacionamentos ;D - programação orientada objeto.
9;Quais são os 3 símbolos de visibilidade usados na criação de um diagrama de classes?;A;A - + (publico), "-" (privado), # (protegido) ;B - # (publico), + (privado), "-" (protegido) ;C - "-" (publico), + (privado), # (protegido);D - * (publico), # (privado), / (protegido).
10;O que contém uma programação orientada a objeto?;A;A - Atributos e Métodos;B - Métodos e tebelas ;C - Apenas atributos;D - Apenas métodos.
11;O que compõe um DER (Diagrama de Entidade e Relacionamentos) ;A;A - É composto por retângulos (representam as entidades), por elipses (representam atributos) e losangos (representam os relacionamentos) ;B - É composto por círculos (representam as entidades), por elipses (representam atributos) e quadrados (representam os relacionamentos) ;C - É composto por losangos (representam as entidades), por triângulos (representam atributos) e retângulos (representam os relacionamentos) ;D - É composto por círculos (representam as entidades), por pentágonos (representam atributos) e triângulos (representam os relacionamentos).
12;Quais são os “princípios” da programação orientada a objeto (POO)? ;C;A - Encapsulamento e Herança ;B - Encapsulamento, Herança, Polimorfismo e abstração ;C - Encapsulamento, Herança, Polimorfismo ;D - Herança, Polimorfismo.
13; Como se declara uma classe que será representada como herança? ;D;A - class “nome da classe” extends “nome da classe”{};B - class “nome da classe” , “nome da classe mãe”{};C - class “nome da classe mãe” extends “nome da classe ”{};D - class “nome da classe” extends “nome da classe mãe”{}.
14;Quais os tipos de relacionamentos em um diagrama de classe?;A;A - Um para muitos (1-0... 1), um para um (1-0...), muitos para muitos (0...1...1);B - Um para muitos (1-0...) e um para um (1-0...1);C - Um para muitos (1-0...), um para um (1-0...1), muitos para muitos (0...-1...);D - Um para dois (1-2), um para um (1-0...1), muitos para para 1 (0...1).
15; Qual a utilidade de um encapsulamento em uma classe?;B;A - O encapsulamento e usado para destacar  detalhes internos dos métodos de uma classe.;B - O encapsulamento e usado para ocultar detalhes internos dos métodos de uma classe.;C - O encapsulamento e usado para separar uma classe.;D - O encapsulamento e usado para ocultar detalhes de uma classe.
